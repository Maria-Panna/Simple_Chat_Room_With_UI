# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
import time
import socket
import select
import errno
import sys

HEADER_LENGTH = 10
IP = "127.0.0.1" # 0.0.0.0 to 255.255.255.255
PORT = 1234

# Create a socket
# socket.AF_INET - address family, IPv4, some otehr possible are AF_INET6, AF_BLUETOOTH, AF_UNIX
# socket.SOCK_STREAM - TCP, conection-based, socket.SOCK_DGRAM - UDP, connectionless, datagrams, socket.SOCK_RAW - raw IP packets
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect to a given ip and port
client_socket.connect((IP, PORT))

# Set connection to non-blocking state, so .recv() call won;t block, just return some exception we'll handle
client_socket.setblocking(False)


class Ui_MainWindow(object):
    def incomingMessage(self, name, time, message):
        _translate = QtCore.QCoreApplication.translate
        self.frame_1 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
        self.frame_1.setMinimumSize(QtCore.QSize(0, 60))
        self.frame_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_1.setObjectName("frame_1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_1)
        self.verticalLayout_2.setContentsMargins(-1, 0, -1, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_5 = QtWidgets.QFrame(self.frame_1)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_4.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("padding-left: 5px;")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        spacerItem1 = QtWidgets.QSpacerItem(325, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.verticalLayout_2.addWidget(self.frame_5)
        self.frame_2 = QtWidgets.QFrame(self.frame_1)
        self.frame_2.setMinimumSize(QtCore.QSize(0, 30))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        self.label_2.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background: rgb(106, 191, 255);\n"
        "border-radius: 15px;\n"
        "padding-left: 10px;\n"
        "padding-right: 10px;")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        spacerItem2 = QtWidgets.QSpacerItem(186, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.verticalLayout_2.addWidget(self.frame_2)
        self.verticalLayout_4.addWidget(self.frame_1)
        self.label_3.setText(_translate("MainWindow", name+" "+time))
        self.label_2.setText(_translate("MainWindow", message))




    def outgoingMessage(self, name, time, message):
        if message:
            _translate = QtCore.QCoreApplication.translate
            self.frame_3 = QtWidgets.QFrame(self.scrollAreaWidgetContents)
            self.frame_3.setMinimumSize(QtCore.QSize(0, 60))
            self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
            self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
            self.frame_3.setObjectName("frame_3")
            self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_3)
            self.verticalLayout_3.setContentsMargins(-1, 0, -1, 0)
            self.verticalLayout_3.setObjectName("verticalLayout_3")
            self.frame = QtWidgets.QFrame(self.frame_3)
            self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
            self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
            self.frame.setObjectName("frame")
            self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
            self.horizontalLayout.setContentsMargins(-1, 0, -1, 0)
            self.horizontalLayout.setObjectName("horizontalLayout")
            spacerItem3 = QtWidgets.QSpacerItem(308, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.horizontalLayout.addItem(spacerItem3)
            self.label_4 = QtWidgets.QLabel(self.frame)
            font = QtGui.QFont()
            font.setPointSize(10)
            self.label_4.setFont(font)
            self.label_4.setStyleSheet("padding-right: 5px;")
            self.label_4.setObjectName("label_4")
            self.horizontalLayout.addWidget(self.label_4)
            self.verticalLayout_3.addWidget(self.frame)
            self.frame_4 = QtWidgets.QFrame(self.frame_3)
            self.frame_4.setMinimumSize(QtCore.QSize(0, 30))
            self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
            self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
            self.frame_4.setObjectName("frame_4")
            self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_4)
            self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
            self.horizontalLayout_3.setObjectName("horizontalLayout_3")
            spacerItem4 = QtWidgets.QSpacerItem(186, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
            self.horizontalLayout_3.addItem(spacerItem4)
            self.label_5 = QtWidgets.QLabel(self.frame_4)
            self.label_5.setMinimumSize(QtCore.QSize(0, 30))
            font = QtGui.QFont()
            font.setPointSize(12)
            self.label_5.setFont(font)
            self.label_5.setStyleSheet("background:  rgb(215, 229, 255);\n"
            "border-radius: 15px;\n"
            "padding-left: 10px;\n"
            "padding-right: 10px;")
            self.label_5.setObjectName("label_5")
            self.horizontalLayout_3.addWidget(self.label_5)
            self.verticalLayout_3.addWidget(self.frame_4)
            self.verticalLayout_4.addWidget(self.frame_3)
            self.label_4.setText(_translate("MainWindow", name+' '+time))
            self.label_5.setText(_translate("MainWindow", message))
            self.plainTextEdit.setPlainText(_translate("MainWindow", ""))


            message = message.encode('utf-8')
            message_header = f"{len(message):<{HEADER_LENGTH}}".encode('utf-8')
            client_socket.send(message_header + message)

    def setupUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(350, 549)
        MainWindow.setStyleSheet("background: white;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setStyleSheet("background: rgb(204, 204, 204);\n"
        "border-radius: 15px;")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 417, 531))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        spacerItem = QtWidgets.QSpacerItem(20, 68, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem)


        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)

        self.frame_6 = QtWidgets.QFrame(self.centralwidget)
        self.frame_6.setMinimumSize(QtCore.QSize(0, 35))
        self.frame_6.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.frame_6)
        self.plainTextEdit.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setStyleSheet(
            """
                background: rgb(241, 241, 241);
                border-radius: 15px;
                padding-left: 10px;
                padding-right: 5px;
            """)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.horizontalLayout_5.addWidget(self.plainTextEdit)
        self.pushButton = QtWidgets.QPushButton(self.frame_6)
        self.pushButton.setMinimumSize(QtCore.QSize(70, 30))
        self.pushButton.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background: rgb(0, 170, 255);\n"
        "border-radius: 15px;\n"
        "color: white;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText(_translate("MainWindow", "Send"))
        self.horizontalLayout_5.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.frame_6)

        MainWindow.setCentralWidget(self.centralwidget)
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        # self.plainTextEdit.setPlainText(_translate("MainWindow", "Hi"))
        self.plainTextEdit.setPlaceholderText(_translate("MainWindow", "Type a message"))
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
        # self.incomingMessage("Ria", "10:50pm", "Hi, may I know who this is?")
        # self.outgoingMessage("You", "11:20pm", "Hello, this is Jenish")

        t = time.localtime()
        current_time = time.strftime("%I:%M%p", t).lower()
        print(current_time)
        self.pushButton.clicked.connect(lambda: self.outgoingMessage("You", current_time, self.plainTextEdit.toPlainText()))
        # self.plainTextEdit.toPlainText()
    
    def startApp(self, form, mainWindow, name):
        if name:
            form.close()
            

            # Prepare username and header and send them
            # We need to encode username to bytes, then count number of bytes and prepare header of fixed size, that we encode to bytes as well
            self.username = name.encode('utf-8')
            username_header = f"{len(self.username):<{HEADER_LENGTH}}".encode('utf-8')
            client_socket.send(username_header + self.username)
            mainWindow.show()

            self.checkMessage(mainWindow)
        
    def checkMessage(self, mainWindow):
        while True:
            QtTest.QTest.qWait(1)
            try:
                # Now we want to loop over received messages (there might be more than one) and print them
                while True:
                    QtTest.QTest.qWait(1)
                    # Receive our "header" containing username length, it's size is defined and constant
                    username_header = client_socket.recv(HEADER_LENGTH)

                    # If we received no data, server gracefully closed a connection, for example using socket.close() or socket.shutdown(socket.SHUT_RDWR)
                    if not len(username_header):
                        t = time.localtime()
                        current_time = time.strftime("%I:%M%p", t).lower()
                        self.incomingMessage('Server', current_time, 'Connection closed by the server')
                        print('Connection closed by the server')
                        # sys.exit()

                    # Convert header to int value
                    username_length = int(username_header.decode('utf-8').strip())

                    # Receive and decode username
                    username = client_socket.recv(username_length).decode('utf-8')

                    # Now do the same for message (as we received username, we received whole message, there's no need to check if it has any length)
                    message_header = client_socket.recv(HEADER_LENGTH)
                    message_length = int(message_header.decode('utf-8').strip())
                    message = client_socket.recv(message_length).decode('utf-8')

                    # Print message
                    print(f'{username} > {message}')
                    t = time.localtime()
                    current_time = time.strftime("%I:%M%p", t).lower()
                    self.incomingMessage(username, current_time, message)

            except IOError as e:
                # This is normal on non blocking connections - when there are no incoming data error is going to be raised
                # Some operating systems will indicate that using AGAIN, and some using WOULDBLOCK error code
                # We are going to check for both - if one of them - that's expected, means no incoming data, continue as normal
                # If we got different error code - something happened
                if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:
                    t = time.localtime()
                    current_time = time.strftime("%I:%M%p", t).lower()
                    self.incomingMessage('Server', current_time, 'Reading error: {}'.format(str(e)))
                    print('Reading error: {}'.format(str(e)))
                    QtTest.QTest.qWait(5000)
                    sys.exit()

                # We just did not receive anything
                continue

            except Exception as e:
                # Any other exception - something happened, exit
                t = time.localtime()
                current_time = time.strftime("%I:%M%p", t).lower()
                self.incomingMessage('Server', current_time, 'Reading error: '.format(str(e)))
                print('Reading error: '.format(str(e)))
                QtTest.QTest.qWait(5000)
                sys.exit()
                


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()

    import login
    loginUi = login.Ui_Form()
    Form = QtWidgets.QWidget()
    loginUi.setupUi(Form)
    Form.show()
    loginUi.pushButton.clicked.connect(lambda: ui.startApp(Form, MainWindow, loginUi.plainTextEdit.toPlainText()))
    ui.setupUi(MainWindow)
    # MainWindow.show()
    sys.exit(app.exec_())
